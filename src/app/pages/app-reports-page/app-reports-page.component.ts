import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatTableModule } from '@angular/material/table';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatChipsModule } from '@angular/material/chips';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatMenuModule } from '@angular/material/menu';
import { Report, ReportStatus, ReportType, ReportCategory, ExportFormat, ReportStatusColorMap, ReportTypeColorMap, ReportCategoryColorMap, ReportFormatIconMap } from '../../models';

@Component({
  selector: 'app-reports-page',
  standalone: true,
  imports: [
    CommonModule, 
    MatCardModule, 
    MatButtonModule, 
    MatIconModule,
    MatTableModule,
    MatPaginatorModule,
    MatChipsModule,
    MatTooltipModule,
    MatMenuModule
  ],
  template: `
    <div class="page-container">
      <div class="page-header">
        <div class="header-content">
          <div>
            <h1 class="page-title">Reports</h1>
            <p class="page-subtitle">Generate and manage system reports</p>
          </div>
          <div class="header-actions">
            <button mat-flat-button color="primary" [matMenuTriggerFor]="newReportMenu">
              <mat-icon>add</mat-icon>
              Generate Report
            </button>
            <mat-menu #newReportMenu="matMenu">
              <button mat-menu-item>
                <mat-icon>school</mat-icon>
                <span>Academic Report</span>
              </button>
              <button mat-menu-item>
                <mat-icon>event_available</mat-icon>
                <span>Attendance Report</span>
              </button>
              <button mat-menu-item>
                <mat-icon>assessment</mat-icon>
                <span>Performance Report</span>
              </button>
              <button mat-menu-item>
                <mat-icon>analytics</mat-icon>
                <span>Analytics Report</span>
              </button>
            </mat-menu>
          </div>
        </div>
      </div>

      <mat-card class="content-card">
        <mat-card-content>
          <div class="table-container">
            <table mat-table [dataSource]="reports" class="reports-table">
              <!-- Report Title Column -->
              <ng-container matColumnDef="title">
                <th mat-header-cell *matHeaderCellDef>Report</th>
                <td mat-cell *matCellDef="let report">
                  <div class="report-info">
                    <strong>{{report.title}}</strong>
                    <div class="report-type">
                      <mat-chip [color]="getTypeColor(report.type)" selected size="small">
                        {{report.type}}
                      </mat-chip>
                    </div>
                  </div>
                </td>
              </ng-container>

              <!-- Category Column -->
              <ng-container matColumnDef="category">
                <th mat-header-cell *matHeaderCellDef>Category</th>
                <td mat-cell *matCellDef="let report">
                  <mat-chip [color]="getCategoryColor(report.category)" selected size="small">
                    {{report.category}}
                  </mat-chip>
                </td>
              </ng-container>

              <!-- Generated By Column -->
              <ng-container matColumnDef="generatedBy">
                <th mat-header-cell *matHeaderCellDef>Generated By</th>
                <td mat-cell *matCellDef="let report">{{report.generatedBy}}</td>
              </ng-container>

              <!-- Period Column -->
              <ng-container matColumnDef="period">
                <th mat-header-cell *matHeaderCellDef>Period</th>
                <td mat-cell *matCellDef="let report">
                  <div class="period-info">
                    <div>{{report.period}}</div>
                    <div class="generated-date">{{report.generatedDate}}</div>
                  </div>
                </td>
              </ng-container>

              <!-- Format Column -->
              <ng-container matColumnDef="format">
                <th mat-header-cell *matHeaderCellDef>Format</th>
                <td mat-cell *matCellDef="let report">
                  <div class="format-info">
                    <mat-icon class="format-icon">{{getFormatIcon(report.format)}}</mat-icon>
                    <span>{{report.format}}</span>
                    <div class="file-size">{{report.size}}</div>
                  </div>
                </td>
              </ng-container>

              <!-- Status Column -->
              <ng-container matColumnDef="status">
                <th mat-header-cell *matHeaderCellDef>Status</th>
                <td mat-cell *matCellDef="let report">
                  <mat-chip [color]="getStatusColor(report.status)" selected>
                    {{report.status}}
                  </mat-chip>
                </td>
              </ng-container>

              <!-- Downloads Column -->
              <ng-container matColumnDef="downloads">
                <th mat-header-cell *matHeaderCellDef>Downloads</th>
                <td mat-cell *matCellDef="let report">
                  <div class="downloads-info">
                    <mat-icon>file_download</mat-icon>
                    {{report.downloads}}
                  </div>
                </td>
              </ng-container>

              <!-- Actions Column -->
              <ng-container matColumnDef="actions">
                <th mat-header-cell *matHeaderCellDef>Actions</th>
                <td mat-cell *matCellDef="let report">
                  <div class="action-buttons">
                    <button mat-icon-button matTooltip="Download Report"
                            *ngIf="report.status === ReportStatus.GENERATED">
                      <mat-icon>file_download</mat-icon>
                    </button>
                    <button mat-icon-button matTooltip="View Report">
                      <mat-icon>assessment</mat-icon>
                    </button>
                    <button mat-icon-button matTooltip="Share Report">
                      <mat-icon>ios_share</mat-icon>
                    </button>
                    <button mat-icon-button matTooltip="More Options" [matMenuTriggerFor]="actionMenu">
                      <mat-icon>more_vert</mat-icon>
                    </button>
                    <mat-menu #actionMenu="matMenu">
                      <button mat-menu-item>
                        <mat-icon>refresh</mat-icon>
                        <span>Regenerate</span>
                      </button>
                      <button mat-menu-item>
                        <mat-icon>schedule</mat-icon>
                        <span>Schedule</span>
                      </button>
                      <button mat-menu-item>
                        <mat-icon>delete_outline</mat-icon>
                        <span>Delete</span>
                      </button>
                    </mat-menu>
                  </div>
                </td>
              </ng-container>

              <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
              <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
            </table>
          </div>
          
          <mat-paginator 
            [pageSizeOptions]="[5, 10, 20]" 
            showFirstLastButtons>
          </mat-paginator>
        </mat-card-content>
      </mat-card>
    </div>
  `,
  styleUrl: './app-reports-page.component.scss'
})
export class AppReportsPageComponent {
  displayedColumns: string[] = ['title', 'category', 'generatedBy', 'period', 'format', 'status', 'downloads', 'actions'];
  
  // Make enums available in template
  ReportStatus = ReportStatus;
  
  reports: Report[] = [
    {
      id: 1,
      title: 'Student Performance Summary',
      type: ReportType.PERFORMANCE,
      category: ReportCategory.STUDENT,
      generatedBy: 'Dr. Sarah Johnson',
      generatedDate: 'Dec 16, 2024',
      period: 'Fall 2024',
      format: ExportFormat.PDF,
      status: ReportStatus.GENERATED,
      fileSize: '2.3 MB',
      downloads: 12
    },
    {
      id: 2,
      title: 'Course Enrollment Analytics',
      type: ReportType.ANALYTICS,
      category: ReportCategory.COURSE,
      generatedBy: 'System Auto',
      generatedDate: 'Dec 15, 2024',
      period: 'Q4 2024',
      format: ExportFormat.EXCEL,
      status: ReportStatus.GENERATED,
      fileSize: '1.8 MB',
      downloads: 8
    },
    {
      id: 3,
      title: 'Monthly Attendance Report',
      type: ReportType.ATTENDANCE,
      category: ReportCategory.STUDENT,
      generatedBy: 'Prof. Michael Chen',
      generatedDate: 'Dec 14, 2024',
      period: 'November 2024',
      format: ExportFormat.CSV,
      status: ReportStatus.GENERATED,
      fileSize: '456 KB',
      downloads: 25
    },
    {
      id: 4,
      title: 'Faculty Performance Review',
      type: ReportType.PERFORMANCE,
      category: ReportCategory.FACULTY,
      generatedBy: 'Admin Office',
      generatedDate: 'Processing...',
      period: 'Fall 2024',
      format: 'PowerBI',
      status: ReportStatus.PROCESSING,
      fileSize: '-',
      downloads: 0
    },
    {
      id: 5,
      title: 'Financial Aid Distribution',
      type: ReportType.ACADEMIC,
      category: ReportCategory.STUDENT,
      generatedBy: 'Finance Dept',
      generatedDate: 'Dec 12, 2024',
      period: 'Academic Year 2024',
      format: ExportFormat.PDF,
      status: ReportStatus.GENERATED,
      fileSize: '5.2 MB',
      downloads: 3
    },
    {
      id: 6,
      title: 'System Usage Analytics',
      type: ReportType.ANALYTICS,
      category: ReportCategory.SYSTEM,
      generatedBy: 'IT Department',
      generatedDate: 'Scheduled',
      period: 'Weekly',
      format: ExportFormat.EXCEL,
      status: ReportStatus.SCHEDULED,
      fileSize: '-',
      downloads: 0
    }
  ];

  getStatusColor(status: ReportStatus): 'primary' | 'accent' | 'warn' | undefined {
    return ReportStatusColorMap[status];
  }

  getTypeColor(type: ReportType): 'primary' | 'accent' | 'warn' | undefined {
    return ReportTypeColorMap[type];
  }

  getCategoryColor(category: ReportCategory): 'primary' | 'accent' | 'warn' | undefined {
    return ReportCategoryColorMap[category];
  }

  getFormatIcon(format: ExportFormat | string): string {
    if (format === 'PowerBI') {
      return ReportFormatIconMap.PowerBI;
    }
    return ReportFormatIconMap[format as ExportFormat] || 'description';
  }
}
